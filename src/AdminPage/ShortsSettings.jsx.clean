import React, { useState, useEffect, useCallback } from 'react';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';
import { getApiBase } from '../config/apiBase';
import Sidebar from './Sidebar';
import { parseYouTubeVideoId, getEmbedUrl } from '../utils/youtubeUtils';

const ShortsSettings = () => {
  const navigate = useNavigate();
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [input, setInput] = useState('');
  const [video, setVideo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isClearing, setIsClearing] = useState(false);
  const [parsed, setParsed] = useState('');
  const [previewKey, setPreviewKey] = useState(0);

  const token = localStorage.getItem('token');

  // Load video on mount
  useEffect(() => {
    if (!token) {
      toast.error('Please log in to access this page');
      navigate('/login');
      return;
    }

    const loadVideo = async () => {
      setIsLoading(true);
      try {
        const res = await fetch(`${getApiBase()}/settings/shorts-videos`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (res.status === 401) {
          localStorage.removeItem('token');
          toast.error('Session expired. Please log in again.');
          navigate('/login');
          return;
        }
        
        if (!res.ok) {
          const errorData = await res.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to load video');
        }
        
        const data = await res.json();
        if (data.value) {
          setVideo({
            id: '1',
            videoId: data.value,
            url: `https://youtube.com/watch?v=${data.value}`,
            addedAt: new Date().toISOString()
          });
        } else {
          setVideo(null);
        }
      } catch (error) {
        console.error('Error loading video:', error);
        toast.error(`Error: ${error.message || 'Failed to load video'}`);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadVideo();
  }, [navigate, token]);

  const saveVideo = useCallback(async (videoToSave) => {
    setIsSaving(true);
    try {
      if (!token) {
        throw new Error('Authentication required. Please log in again.');
      }
      
      const videoId = videoToSave?.videoId || '';
      const res = await fetch(`${getApiBase()}/settings/shorts-videos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ value: videoId }),
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to save video');
      }
      
      await res.json();
      
      if (videoId) {
        const newVideo = {
          id: '1',
          videoId,
          url: `https://youtube.com/watch?v=${videoId}`,
          addedAt: new Date().toISOString()
        };
        setVideo(newVideo);
      } else {
        setVideo(null);
      }
      
      toast.success(videoId ? 'Video saved successfully' : 'Video removed');
      setPreviewKey(prev => prev + 1);
      return true;
    } catch (error) {
      console.error('Error saving video:', error);
      toast.error(`Error: ${error.message || 'Failed to save video'}`);
      return false;
    } finally {
      setIsSaving(false);
    }
  }, [token]);

  // Update parsed video ID when input changes
  useEffect(() => {
    const videoId = parseYouTubeVideoId(input);
    setParsed(videoId || '');
  }, [input]);

  // Add a new video
  const addVideo = useCallback(() => {
    const videoId = parseYouTubeVideoId(input);
    if (!videoId) {
      toast.error('Please enter a valid YouTube URL or ID');
      return;
    }

    const newVideo = {
      id: '1',
      videoId,
      url: input,
      addedAt: new Date().toISOString(),
    };

    saveVideo(newVideo);
    setInput('');
  }, [input, saveVideo]);

  const removeVideo = useCallback(async () => {
    if (!window.confirm('Are you sure you want to remove the current video? This cannot be undone.')) {
      return;
    }
    
    setIsClearing(true);
    try {
      const success = await saveVideo(null);
      if (success) {
        setVideo(null);
        setPreviewKey(prev => prev + 1);
        toast.success('Video has been removed');
        
        // Notify other tabs about the update
        if (typeof BroadcastChannel !== 'undefined') {
          const channel = new BroadcastChannel('shorts-update');
          try {
            channel.postMessage({ type: 'shorts-update', videos: [] });
          } catch (error) {
            console.error('Error posting message to channel:', error);
          } finally {
            channel.close();
          }
        }
      }
    } catch (error) {
      console.error('Error removing video:', error);
      toast.error('Failed to remove video');
    } finally {
      setIsClearing(false);
    }
  }, [saveVideo]);

  if (isLoading) {
    return (
      <div className="flex h-screen bg-gray-50">
        <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
        <div className={`flex-1 p-8 transition-all duration-300 ${sidebarOpen ? 'ml-64' : 'ml-20'}`}>
          <h1 className="text-2xl font-bold mb-6">Shorts Settings</h1>
          <div className="animate-pulse">Loading video...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
      <div className={`flex-1 transition-all duration-300 ${sidebarOpen ? 'ml-64' : 'ml-20'}`}>
        <div className="p-4 mt-14">
          {/* Your existing JSX content here */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 lg:p-8">
            <div className="mb-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-2">Video Configuration</h2>
              <p className="text-gray-600 text-sm leading-relaxed">
                Paste a YouTube Shorts or Video URL (or just the video ID).
              </p>
            </div>
            
            <form onSubmit={(e) => { e.preventDefault(); addVideo(); }} className="space-y-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-3">
                  YouTube URL or Video ID
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="https://youtube.com/shorts/XXXXXXXXXXX or video ID"
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-red-500 focus:ring-2 focus:ring-offset-2 focus:ring-red-500 text-sm bg-gray-50 focus:bg-white"
                  />
                </div>
              </div>
              
              <div className="flex justify-end space-x-4">
                <button
                  type="button"
                  onClick={removeVideo}
                  disabled={!video || isSaving}
                  className="px-6 py-3 text-sm font-semibold text-white bg-red-600 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isSaving ? 'Removing...' : 'Remove Video'}
                </button>
                <button
                  type="submit"
                  disabled={!parsed || isSaving}
                  className="px-6 py-3 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isSaving ? 'Saving...' : 'Save Video'}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <ToastContainer 
        position="top-right" 
        autoClose={4000} 
        hideProgressBar={false} 
        closeOnClick 
        pauseOnHover 
        draggable 
        theme="colored"
        toastClassName="rounded-xl"
        style={{ zIndex: 999999 }}
      />
    </div>
  );
};

export default ShortsSettings;
