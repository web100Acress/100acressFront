import React, { useContext, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { message } from "antd";
import { Eye, EyeOff, Loader2 } from "lucide-react";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import { AuthContext } from "../AuthContext";
import { FcGoogle } from "react-icons/fc";
import axios from "axios";

function LoginForm({ inModal = false, onSwitchToRegister }) {
  const { login, setUser } = useContext(AuthContext);
  const [messageApi, contextHolder] = message.useMessage();
  const navigate = useNavigate();

  const [userLogin, setUserLogin] = useState({ email: "", password: "" });
  const [passwordHide, setPasswordHide] = useState(true);
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleLoginChange = (e) => {
    const { name, value } = e.target;
    setUserLogin((prev) => ({ ...prev, [name]: value }));
  };

  const handleUserLogin = async () => {
    try {
      setIsLoading(true);
      await login(userLogin, messageApi);
      navigate('/');
    } catch (error) {
      console.error('Login error:', error);
      messageApi.error(error.response?.data?.message || 'Failed to login. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSuccess = useCallback(async (response) => {
    try {
      setIsGoogleLoading(true);
      // Send the Google credential to your backend
      const { data } = await axios.post(
        `${process.env.VITE_API_BASE || 'http://localhost:3500'}/auth/google/callback`,
        { credential: response.credential }
      );
      
      // Store the token in localStorage
      localStorage.setItem('token', data.token);
      
      // Set user in context
      setUser(data.user);
      
      // Show success message
      messageApi.success('Logged in successfully with Google!');
      
      // Redirect to home
      navigate('/');
    } catch (error) {
      console.error('Google login error:', error);
      messageApi.error('Failed to login with Google. Please try again.');
    } finally {
      setIsGoogleLoading(false);
    }
  }, [navigate, messageApi, setUser]);

  const handleGoogleFailure = useCallback((error) => {
    console.error('Google login failed:', error);
    messageApi.error('Google login failed. Please try again.');
  }, [messageApi]);

  const handleClick = (e) => {
    e.preventDefault();
    if (!userLogin.email || !userLogin.password) {
      messageApi.warning('Please enter both email and password');
      return;
    }
    handleUserLogin();
  };

  return (
    <>
      {contextHolder}
      <div className={`bg-white/95 shadow-[0_12px_32px_rgba(239,68,68,0.15)] rounded-2xl p-6 md:p-8 ${inModal ? "w-full" : "max-sm:w-[85vw]"}`}>
        {/* Heading */}
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-gray-900">Welcome Back</h2>
          <p className="text-gray-600 mt-1">Please sign in to your account</p>
        </div>

        <form className="space-y-4">
          {/* Email Input */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={userLogin.email}
              onChange={handleLoginChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
              placeholder="Enter your email"
              required
            />
          </div>

          {/* Password Input */}
          <div className="relative">
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              Password
            </label>
            <div className="relative">
              <input
                type={passwordHide ? "password" : "text"}
                id="password"
                name="password"
                value={userLogin.password}
                onChange={handleLoginChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent pr-10"
                placeholder="Enter your password"
                required
              />
              <button
                type="button"
                onClick={() => setPasswordHide(!passwordHide)}
                className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500 hover:text-gray-700"
              >
                {passwordHide ? (
                  <EyeOff className="h-5 w-5" />
                ) : (
                  <Eye className="h-5 w-5" />
                )}
              </button>
            </div>
          </div>

          {/* Forgot Password */}
          <div className="flex justify-end">
            <button
              type="button"
              className="text-sm text-red-600 hover:underline"
              onClick={() => navigate('/forgot-password')}
            >
              Forgot Password?
            </button>
          </div>

          {/* Login Button */}
          <button
            type="submit"
            onClick={handleClick}
            disabled={isLoading}
            className="w-full bg-red-600 text-white py-2.5 px-4 rounded-lg font-medium hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                Signing in...
              </>
            ) : (
              'Sign In'
            )}
          </button>

          {/* Divider */}
          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">Or continue with</span>
            </div>
          </div>

          {/* Google Sign In Button */}
          <div className="mt-6">
            <GoogleOAuthProvider clientId={process.env.VITE_GOOGLE_CLIENT_ID}>
              <GoogleLogin
                onSuccess={handleGoogleSuccess}
                onError={handleGoogleFailure}
                useOneTap
                render={(renderProps) => (
                  <button
                    onClick={renderProps.onClick}
                    disabled={isGoogleLoading || renderProps.disabled}
                    className="w-full flex items-center justify-center gap-2 bg-white border border-gray-300 rounded-lg px-4 py-2.5 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isGoogleLoading ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <FcGoogle className="h-5 w-5" />
                    )}
                    <span>Continue with Google</span>
                  </button>
                )}
              />
            </GoogleOAuthProvider>
          </div>
        </form>

        {/* Footer */}
        <div className="mt-4 text-center text-sm text-slate-600">
          Don't have an account?{" "}
          <button 
            className="text-[#e53935] font-semibold hover:underline" 
            onClick={() => onSwitchToRegister && onSwitchToRegister()}
          >
            Register
          </button>
        </div>
      </div>
    </>
  );
}

export default LoginForm;
